// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AccessPointSpec defines the desired state of AccessPoint.
type AccessPointSpec struct {
	FileSystemID  *string                                  `json:"fileSystemID,omitempty"`
	FileSystemRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"fileSystemRef,omitempty"`
	PosixUser     *PosixUser                               `json:"posixUser,omitempty"`
	RootDirectory *RootDirectory                           `json:"rootDirectory,omitempty"`
	Tags          []*Tag                                   `json:"tags,omitempty"`
}

// AccessPointStatus defines the observed state of AccessPoint
type AccessPointStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// +kubebuilder:validation:Optional
	AccessPointID *string `json:"accessPointID,omitempty"`
	// +kubebuilder:validation:Optional
	LifeCycleState *string `json:"lifeCycleState,omitempty"`
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty"`
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerID,omitempty"`
}

// AccessPoint is the Schema for the AccessPoints API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="ID",type=string,priority=0,JSONPath=`.status.accessPointID`
// +kubebuilder:printcolumn:name="FILESYSTEMID",type=string,priority=0,JSONPath=`.spec.fileSystemID`
// +kubebuilder:printcolumn:name="ROOTDIRECTORY",type=string,priority=0,JSONPath=`.spec.rootDirectory.path`
// +kubebuilder:printcolumn:name="POSIXUSERUID",type=integer,priority=0,JSONPath=`.spec.posixUser.uid`
// +kubebuilder:printcolumn:name="POSIXUSERGID",type=integer,priority=0,JSONPath=`.spec.posixUser.gid`
// +kubebuilder:printcolumn:name="STATE",type=string,priority=0,JSONPath=`.status.lifeCycleState`
// +kubebuilder:printcolumn:name="Synced",type="string",priority=0,JSONPath=".status.conditions[?(@.type==\"ACK.ResourceSynced\")].status"
// +kubebuilder:printcolumn:name="Age",type="date",priority=0,JSONPath=".metadata.creationTimestamp"
type AccessPoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessPointSpec   `json:"spec,omitempty"`
	Status            AccessPointStatus `json:"status,omitempty"`
}

// AccessPointList contains a list of AccessPoint
// +kubebuilder:object:root=true
type AccessPointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessPoint `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AccessPoint{}, &AccessPointList{})
}
